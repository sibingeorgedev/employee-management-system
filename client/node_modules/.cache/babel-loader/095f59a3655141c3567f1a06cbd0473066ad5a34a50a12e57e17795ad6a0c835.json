{"ast":null,"code":"var _jsxFileName = \"D:\\\\Conestoga\\\\Sem 3\\\\Full-Stack\\\\employee-management-system\\\\client\\\\src\\\\components\\\\EmployeeDirectory.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport EmployeeSearch from './EmployeeSearch';\nimport EmployeeTable from './EmployeeTable';\nimport EmployeeCreate from './EmployeeCreate';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchData() {\n  const data = await fetch('http://localhost:3002/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `query {\n        getEmployees {\n          firstName\n          lastName\n          age\n          dateOfJoining\n          title\n          department\n          employeeType\n          currentStatus\n        }\n      }`\n    })\n  });\n  const json = await data.json();\n  return json.data.getEmployees;\n}\n\n// async function createEmployeeAPI(employee) {\n//   const data = await fetch('http://localhost:3001/graphql', {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({\n//       query: `mutation AddEmployee($input: InputEmployee!) {\n//   addEmployee(employee: $input) {\n//     firstName\n//     lastName\n//     age\n//     dateOfJoining\n//     title\n//     department\n//     employeeType\n//     currentStatus\n//   }\n// }`,\n//       variables: { input: employee }\n//     }),\n\n//   })\n\n//   const json = await data.json()\n//   return json.data.addEmployee\n\n// }\n\n// const createEmployeeAPI = async (employee) => {\n//   const response = await fetch('http://localhost:3002/graphql', {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({\n//       query: `\n//           mutation addEmployee(\n//             $firstName: String!\n//             $lastName: String!\n//             $age: Int!\n//             $dateOfJoining: Date!\n//             $title: String!\n//             $department: String!\n//             $employeeType: String!\n//             $currentStatus: Boolean!\n//           ) {\n//             addEmployee(\n//               firstName: $firstName\n//               lastName: $lastName\n//               age: $age\n//               dateOfJoining: $dateOfJoining\n//               title: $title\n//               department: $department\n//               employeeType: $employeeType\n//               currentStatus: $currentStatus\n//             ) {\n//               id\n//               firstName\n//               lastName\n//               age\n//               dateOfJoining\n//               title\n//               department\n//               employeeType\n//               currentStatus\n//             }\n//           }\n//         `,\n//       variables: employee,\n//     }),\n//   });\n//   const json = await response.json();\n//   return json.data.addEmployee;\n// };\n\nconst createEmployeeAPI = async employee => {\n  const response = await fetch('http://localhost:3002/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `\n        mutation addEmployee($input: InputEmployee!) {\n          addEmployee(employee: $input) {\n            firstName,\n            lastName,\n            age,\n            dateOfJoining,\n            title,\n            department,\n            employeeType,\n            currentStatus\n          }\n        }\n      `,\n      variables: {\n        input: employee\n      }\n    })\n  });\n  const json = await response.json();\n  return json.data.addEmployee;\n};\nconst EmployeeDirectory = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const handleCreateEmployee = async employee => {\n    employee = await createEmployeeAPI(employee);\n    setEmployees([...employees, employee]);\n  };\n  useEffect(() => {\n    const wrap_function = async () => {\n      const data = await fetchData();\n      console.log(\"Fetching data...\", data);\n      setEmployees(data);\n    };\n    wrap_function();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-directory\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(EmployeeSearch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(EmployeeTable, {\n        employeeData: employees\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmployeeCreate, {\n      handleCreateEmployee: handleCreateEmployee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeDirectory, \"/A1Ii8+9z2SDNTFDutGp9pjEZTU=\");\n_c = EmployeeDirectory;\nexport default EmployeeDirectory;\nvar _c;\n$RefreshReg$(_c, \"EmployeeDirectory\");","map":{"version":3,"names":["React","EmployeeSearch","EmployeeTable","EmployeeCreate","useState","useEffect","jsxDEV","_jsxDEV","fetchData","data","fetch","method","headers","body","JSON","stringify","query","json","getEmployees","createEmployeeAPI","employee","response","variables","input","addEmployee","EmployeeDirectory","_s","employees","setEmployees","handleCreateEmployee","wrap_function","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","employeeData","_c","$RefreshReg$"],"sources":["D:/Conestoga/Sem 3/Full-Stack/employee-management-system/client/src/components/EmployeeDirectory.js"],"sourcesContent":["import React from 'react';\r\nimport EmployeeSearch from './EmployeeSearch';\r\nimport EmployeeTable from './EmployeeTable';\r\nimport EmployeeCreate from './EmployeeCreate';\r\nimport { useState, useEffect } from 'react';\r\n\r\nasync function fetchData() {\r\n\r\n  const data = await fetch('http://localhost:3002/graphql', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      query: `query {\r\n        getEmployees {\r\n          firstName\r\n          lastName\r\n          age\r\n          dateOfJoining\r\n          title\r\n          department\r\n          employeeType\r\n          currentStatus\r\n        }\r\n      }` }),\r\n  })\r\n\r\n  const json = await data.json()\r\n  return json.data.getEmployees\r\n\r\n}\r\n\r\n// async function createEmployeeAPI(employee) {\r\n//   const data = await fetch('http://localhost:3001/graphql', {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({\r\n//       query: `mutation AddEmployee($input: InputEmployee!) {\r\n//   addEmployee(employee: $input) {\r\n//     firstName\r\n//     lastName\r\n//     age\r\n//     dateOfJoining\r\n//     title\r\n//     department\r\n//     employeeType\r\n//     currentStatus\r\n//   }\r\n// }`,\r\n//       variables: { input: employee }\r\n//     }),\r\n\r\n//   })\r\n\r\n//   const json = await data.json()\r\n//   return json.data.addEmployee\r\n\r\n// }\r\n\r\n\r\n// const createEmployeeAPI = async (employee) => {\r\n//   const response = await fetch('http://localhost:3002/graphql', {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({\r\n//       query: `\r\n//           mutation addEmployee(\r\n//             $firstName: String!\r\n//             $lastName: String!\r\n//             $age: Int!\r\n//             $dateOfJoining: Date!\r\n//             $title: String!\r\n//             $department: String!\r\n//             $employeeType: String!\r\n//             $currentStatus: Boolean!\r\n//           ) {\r\n//             addEmployee(\r\n//               firstName: $firstName\r\n//               lastName: $lastName\r\n//               age: $age\r\n//               dateOfJoining: $dateOfJoining\r\n//               title: $title\r\n//               department: $department\r\n//               employeeType: $employeeType\r\n//               currentStatus: $currentStatus\r\n//             ) {\r\n//               id\r\n//               firstName\r\n//               lastName\r\n//               age\r\n//               dateOfJoining\r\n//               title\r\n//               department\r\n//               employeeType\r\n//               currentStatus\r\n//             }\r\n//           }\r\n//         `,\r\n//       variables: employee,\r\n//     }),\r\n//   });\r\n//   const json = await response.json();\r\n//   return json.data.addEmployee;\r\n// };\r\n\r\n\r\nconst createEmployeeAPI = async (employee) => {\r\n  const response = await fetch('http://localhost:3002/graphql', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      query: `\r\n        mutation addEmployee($input: InputEmployee!) {\r\n          addEmployee(employee: $input) {\r\n            firstName,\r\n            lastName,\r\n            age,\r\n            dateOfJoining,\r\n            title,\r\n            department,\r\n            employeeType,\r\n            currentStatus\r\n          }\r\n        }\r\n      `,\r\n      variables: { input: employee }\r\n    }),\r\n  });\r\n\r\n  const json = await response.json();\r\n  return json.data.addEmployee;\r\n};\r\n\r\n\r\nconst EmployeeDirectory = () => {\r\n\r\n  const [employees, setEmployees] = useState([])\r\n\r\n  const handleCreateEmployee = async (employee) => {\r\n    employee = await createEmployeeAPI(employee)\r\n    setEmployees([...employees, employee])\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const wrap_function = async () => {\r\n      const data = await fetchData()\r\n      console.log(\"Fetching data...\", data)\r\n      setEmployees(data)\r\n    }\r\n\r\n    wrap_function()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"employee-directory\">\r\n      <div className=\"search-container\">\r\n        <EmployeeSearch />\r\n      </div>\r\n      <div className=\"table-container\">\r\n        <EmployeeTable employeeData={employees} />\r\n      </div>\r\n      <EmployeeCreate handleCreateEmployee={handleCreateEmployee} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeDirectory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}